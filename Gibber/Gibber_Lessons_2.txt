/* Programming Music 2
Drums and Rythms:
Drums() converts a string of characters into a pattern
of pre-loaded sounds each represented by a character
'x'=kick, 'o'=snare, '*'=closed high hat, '-'=open high hat,
'.'=rest*/
a = Drums('x.o.-.*.') // "ctl+enter"
a.kill() //unlike .disconnect() after .kill() the element
// cannot be re-connected

b= Drums({kit:'beatbox',note:'asdf'}) 
/* by using brackets "{}" inside our Drums() we can set
the various properties of the Drums() object to what we
want. To explore different properties and methods of any
objects click the 'help' tab in the top of the window
and 'Open Gibber's Reference' (notice kit: is not mentioned!)*/

b._

c = Drums('xoxo') //try alt+enter to exectue all 4 lines
c.pitch =.5 //or use ctl+enter for each line separately
c.amp = .5
c.pan.seq([-1,1],1/2) //pan left then right every 2 beats

c._ 

/* note that if we haven't defined a variable (ie d),
but we still try to target it, gibber will get confused*/

z.pitch=2//"prints an Error!! because we have to define
//what z is before changing it's properties. 
z=Drums('x') // be mindful of this when making your own code


Clock.bpm = 90 //slower clock speed I think this is broken.... Charlie?
Clock.bpm = 120 // back to default

console.log(Clock.bpm) // Check the printed message!
console.log(Clock.timeSignature)//console.log = friend

// Drums can be a little confusing.
d =Drums('x')
d = Drums('x,1') // are the same...
d = Drums('x,1/16')// very different
d._

//Drums automatically divides the measure by number of notes in the string
dd=Drums('oxxx') //4 1/4 notes in the default 4/4 measure
d=Drums('oxxxx')// 5 1/5 notes in a 4/4 measure

Clock.timeSignature = '5/4' // change the meter
d=Drums('oxxxx,1/4') // 5/4 pattern! why do I need the 1/4? Charlie?